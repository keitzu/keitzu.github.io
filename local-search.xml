<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用工具与软件列表</title>
    <link href="/2020/tool-list/"/>
    <url>/2020/tool-list/</url>
    
    <content type="html"><![CDATA[<p>本页面是一个关于个人常用的工具总结，包含了常用工具的名称、用途、下载地址或者链接，用于备份以及分享使用软件。强烈推荐或者常用软件会将名称加粗，列表不定时更新中！</p><a id="more"></a><h1 id="1、桌面应用程序"><a href="#1、桌面应用程序" class="headerlink" title="1、桌面应用程序"></a>1、桌面应用程序</h1><h2 id="1-1-文件处理"><a href="#1-1-文件处理" class="headerlink" title="1.1 文件处理"></a>1.1 文件处理</h2><h2 id="1-2-文档编辑"><a href="#1-2-文档编辑" class="headerlink" title="1.2 文档编辑"></a>1.2 文档编辑</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">下载</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Typora</strong></td><td style="text-align:center">Markdown 文本编辑器</td><td style="text-align:center"><a href="https://typora.io/#windows" target="_blank" rel="noopener">官网下载</a></td><td style="text-align:center">√</td><td style="text-align:center">支持实时预览</td></tr></tbody></table></div><h2 id="1-3-音视频处理"><a href="#1-3-音视频处理" class="headerlink" title="1.3 音视频处理"></a>1.3 音视频处理</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">下载</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">MP3TAG</td><td style="text-align:center">MP3文件标签编辑工具</td><td style="text-align:center"><a href="https://www.mp3tag.de/en/dodownload.html" target="_blank" rel="noopener">官网下载</a></td><td style="text-align:center">√</td><td style="text-align:center">支持批量编辑MP3的tag、支持文件切割与合并</td></tr><tr><td style="text-align:center">DaVinci Resolve</td><td style="text-align:center">视频剪辑软件</td><td style="text-align:center"><a href="http://www.blackmagicdesign.com/cn/products/davinciresolve/edit" target="_blank" rel="noopener">官网下载</a></td><td style="text-align:center">√</td><td style="text-align:center">不仅免费，其非编功能也是非常强大专业</td></tr></tbody></table></div><h2 id="1-4-垃圾清理"><a href="#1-4-垃圾清理" class="headerlink" title="1.4 垃圾清理"></a>1.4 垃圾清理</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">下载</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>SpaceSniffer</strong></td><td style="text-align:center">通过使用树形图可视化布局查看磁盘空间占用的查看工具。</td><td style="text-align:center"><a href="http://www.uderzo.it/main_products/space_sniffer/download.html" target="_blank" rel="noopener">官网下载</a></td><td style="text-align:center">×</td><td style="text-align:center">一款免费软件和便携式工具应用程序，让您了解文件夹和文件在磁盘上的结构。</td></tr></tbody></table></div><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h1 id="2、-在线应用程序"><a href="#2、-在线应用程序" class="headerlink" title="2、 在线应用程序"></a>2、 在线应用程序</h1><h2 id="2-1-文件处理"><a href="#2-1-文件处理" class="headerlink" title="2.1 文件处理"></a>2.1 文件处理</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">链接</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">Convertio</td><td style="text-align:center">将文件转换成任意格式</td><td style="text-align:center"><a href="https://convertio.co/zh/" target="_blank" rel="noopener">点击跳转</a></td><td style="text-align:center">√</td></tr></tbody></table></div><h2 id="2-2-文档编辑"><a href="#2-2-文档编辑" class="headerlink" title="2.2 文档编辑"></a>2.2 文档编辑</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">链接</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">MaHua</td><td style="text-align:center">在线markdown编辑器</td><td style="text-align:center"><a href="http://mahua.jser.me/" target="_blank" rel="noopener">点击跳转</a></td><td style="text-align:center">√</td><td style="text-align:center">支持不同MD文档的渲染主题、支持自定义CSS</td></tr></tbody></table></div><h2 id="2-3-图片资源"><a href="#2-3-图片资源" class="headerlink" title="2.3 图片资源"></a>2.3 图片资源</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">链接</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"><strong>iconfont</strong></td><td style="text-align:center">阿里巴巴矢量图标库</td><td style="text-align:center"><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">点击跳转</a></td><td style="text-align:center">√</td><td style="text-align:center">拥有大量矢量图标可以选择</td></tr></tbody></table></div><h2 id="2-4-可视化工具"><a href="#2-4-可视化工具" class="headerlink" title="2.4 可视化工具"></a>2.4 可视化工具</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">用途</th><th style="text-align:center">链接</th><th style="text-align:center">中文</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">chartblocks</td><td style="text-align:center">线上制图工具</td><td style="text-align:center"><a href="https://www.chartblocks.com/zh" target="_blank" rel="noopener">点击跳转</a></td><td style="text-align:center">√</td><td style="text-align:center">世界上最简单的统计图生成器应用程序。几分钟内就可设计并共享统计图。</td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>实用总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>网站</tag>
      
      <tag>应用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《习惯的力量》读书笔记</title>
    <link href="/2020/note-the-power-of-habit/"/>
    <url>/2020/note-the-power-of-habit/</url>
    
    <content type="html"><![CDATA[<p>《习惯的力量》是一本具有开创性的著作！它将让你重新审视自己的习惯。2012年在美国出版，随即成为一本疯行全球的“习惯改造指南”。它融合了目前最顶级的神经学家、心理学家、社会学家、顶尖企业家和优秀市场营销人员关于习惯的最新认知，同时综合了国际一流企业：宝洁、谷歌、微软，世界顶尖大学：哈佛、耶鲁、剑桥和MIT关于“习惯的力量”的最新研究结果！你想知道的所有关于“改变习惯的秘密”，都将在这本书中找到答案。本书也成为了最受500强企业员工欢迎、提振人心、认知自我的最实用读本！</p><a id="more"></a><p><a href="https://book.douban.com/subject/20507212/" target="_blank" rel="noopener">豆瓣链接</a></p><h1 id="1-个体的习惯"><a href="#1-个体的习惯" class="headerlink" title="1  个体的习惯"></a>1  个体的习惯</h1><h2 id="1-1-习惯是如何运作的"><a href="#1-1-习惯是如何运作的" class="headerlink" title="1.1 习惯是如何运作的"></a>1.1 习惯是如何运作的</h2><p>习惯的出现是因为大脑一直在寻找可以省力的方式。这样的大脑可以让我们不再思考基本的行为，例如行走。</p><p>习惯回路：暗示→惯常行为→奖赏→暗示</p><p>习惯性的决定是不需要消耗脑力的，但是也是有风险的。</p><h2 id="1-2-如何创造新习惯"><a href="#1-2-如何创造新习惯" class="headerlink" title="1.2 如何创造新习惯"></a>1.2 如何创造新习惯</h2><p>某种特定的暗示和奖励机制这两者可以激发人的新习惯。</p><p>基础规律：</p><ol><li>找出一种简单又明显的暗示</li><li>清楚地说明有哪些奖赏</li></ol><p>习惯强大的原因：能够创造出神经渴求</p><h2 id="1-3如何改变旧习惯"><a href="#1-3如何改变旧习惯" class="headerlink" title="1.3如何改变旧习惯"></a>1.3如何改变旧习惯</h2><p>通过改变习惯回路中的惯常行为来改变旧习惯。</p><p>坏习惯是永远都不可能被根除掉的，只能被替代。</p><p>要改变习惯，需要留住原有的暗示和奖励，插入新的惯常行为。</p><p>为了保持习惯，人们得相信改变时可能的。</p><h1 id="2-成功的组织机构的习惯"><a href="#2-成功的组织机构的习惯" class="headerlink" title="2 成功的组织机构的习惯"></a>2 成功的组织机构的习惯</h1><h2 id="2-1-核心习惯"><a href="#2-1-核心习惯" class="headerlink" title="2.1 核心习惯"></a>2.1 核心习惯</h2><p>核心习惯比起其他习惯在重塑商业和生活方式上更有影响力。</p><p>核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。</p><p>善用习惯在于了解核心习惯：最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。</p><p>打造能促成其他习惯蓬勃发展的架构。</p><h2 id="2-2-让意志力变成自发行为"><a href="#2-2-让意志力变成自发行为" class="headerlink" title="2.2 让意志力变成自发行为"></a>2.2 让意志力变成自发行为</h2><p>意志力是有限的，自发的、非强迫性的行为将消耗更少的意志力。</p><h2 id="2-3通过意外事件创造新习惯"><a href="#2-3通过意外事件创造新习惯" class="headerlink" title="2.3通过意外事件创造新习惯"></a>2.3通过意外事件创造新习惯</h2><p>一个精心构建的习惯可以创造令人惊喜的改变，同样，错误的习惯会带来灾难性的结果。</p><p>优秀的领导者会抓住危机来重塑组织习惯。</p><p>危机可以为我们提供机会，让我们做之前不能做的事。</p><h2 id="2-4-操纵与预测习惯"><a href="#2-4-操纵与预测习惯" class="headerlink" title="2.4 操纵与预测习惯"></a>2.4 操纵与预测习惯</h2><p>当遭遇到人生的重大事件时，习惯更容易发生改变。</p><p>我们对“熟悉”事物的偏好其实是神经活动的产物。</p><p>行为习惯可以将我们从每天不得不做的、无穷无尽的决定中解脱出来。</p><h2 id="3-社会的习惯"><a href="#3-社会的习惯" class="headerlink" title="3 社会的习惯"></a>3 社会的习惯</h2><h3 id="3-1社会运动的发生"><a href="#3-1社会运动的发生" class="headerlink" title="3.1社会运动的发生"></a>3.1社会运动的发生</h3><p>在社群中，人与人之间都是讲义气，这就是弱联系的社会习惯。</p><p>要想让一个理念拓展到社群之外，就必须让整个拓展过程能够自我推动。要让人们养成可以帮助他们找到自我方向的新习惯。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>习惯</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode部分SQL习题（二）</title>
    <link href="/2020/sql-on-leetcode-2/"/>
    <url>/2020/sql-on-leetcode-2/</url>
    
    <content type="html"><![CDATA[<p>SQL是一种特定目的编程语言，用于管理关系数据库管理系统（RDBMS），或在关系流数据管理系统（RDSMS）中进行流处理。<br><a id="more"></a></p><h3 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595. 大的国家"></a><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. 大的国家</a></h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>这里有张 World 表</p><pre><code class="hljs plain">+-----------------+------------+------------+--------------+---------------+| name            | continent  | area       | population   | gdp           |+-----------------+------------+------------+--------------+---------------+| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      || Albania         | Europe     | 28748      | 2831741      | 12960000      || Algeria         | Africa     | 2381741    | 37100000     | 188681000     || Andorra         | Europe     | 468        | 78115        | 3712000       || Angola          | Africa     | 1246700    | 20609294     | 100990000     |+-----------------+------------+------------+--------------+---------------+</code></pre><p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p><p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>例如，根据上表，我们应该输出:</p><pre><code class="hljs plain">+--------------+-------------+--------------+| name         | population  | area         |+--------------+-------------+--------------+| Afghanistan  | 25500100    | 652230       || Algeria      | 37100000    | 2381741      |+--------------+-------------+--------------+</code></pre><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs MYSQL">SELECT name, population, areaFROM WorldWHERE area &gt; 3000000    OR population &gt; 25000000</code></pre><h3 id="596-超过5名学生的课"><a href="#596-超过5名学生的课" class="headerlink" title="596. 超过5名学生的课"></a><a href="https://leetcode-cn.com/problems/classes-more-than-5-students/" target="_blank" rel="noopener">596. 超过5名学生的课</a></h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>有一个courses 表 ，有: student (学生) 和 class (课程)。</p><p>请列出所有超过或等于5名学生的课。</p><p>例如,表:</p><pre><code class="hljs plain">+---------+------------+| student | class      |+---------+------------+| A       | Math       || B       | English    || C       | Math       || D       | Biology    || E       | Math       || F       | Computer   || G       | Math       || H       | Math       || I       | Math       |+---------+------------+</code></pre><p>应该输出:</p><pre><code class="hljs plain">+---------+| class   |+---------+| Math    |+---------+</code></pre><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT classFROM (    SELECT class, COUNT(DISTINCT student) AS cnt    FROM courses    GROUP BY class)AS tempWHERE cnt &gt;&#x3D; 5</code></pre><h3 id="601-体育馆的人流量"><a href="#601-体育馆的人流量" class="headerlink" title="601. 体育馆的人流量"></a><a href="https://leetcode-cn.com/problems/human-traffic-of-stadium/" target="_blank" rel="noopener">601. 体育馆的人流量</a></h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>X 市建了一个新的体育馆，每日人流量信息被记录在这三列信息中：序号 (id)、日期 (visit_date)、 人流量 (people)。</p><p>请编写一个查询语句，找出人流量的高峰期。高峰期时，至少连续三行记录中的人流量不少于100。</p><p>例如，表 stadium：</p><pre><code class="hljs plain">+------+------------+-----------+| id   | visit_date | people    |+------+------------+-----------+| 1    | 2017-01-01 | 10        || 2    | 2017-01-02 | 109       || 3    | 2017-01-03 | 150       || 4    | 2017-01-04 | 99        || 5    | 2017-01-05 | 145       || 6    | 2017-01-06 | 1455      || 7    | 2017-01-07 | 199       || 8    | 2017-01-08 | 188       |+------+------------+-----------+</code></pre><p>对于上面的示例数据，输出为：</p><pre><code class="hljs plain">+------+------------+-----------+| id   | visit_date | people    |+------+------------+-----------+| 5    | 2017-01-05 | 145       || 6    | 2017-01-06 | 1455      || 7    | 2017-01-07 | 199       || 8    | 2017-01-08 | 188       |+------+------------+-----------+</code></pre><p>提示：<br>每天只有一行记录，日期随着 id 的增加而增加。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT DISTINCT A.*FROM stadium AS A, stadium AS B, stadium AS CWHERE   A.people &gt;&#x3D; 100 AND B.people &gt;&#x3D; 100 AND C.people &gt;&#x3D; 100    AND(        (A.id - B.id &#x3D; -1 AND B.id - C.id &#x3D; -1)        OR(A.id - B.id &#x3D; 1 AND A.id - C.id &#x3D; -1)        OR(A.id - B.id &#x3D; 1 AND A.id - C.id &#x3D; 2)    )ORDER BY A.id</code></pre><h3 id="620-有趣的电影"><a href="#620-有趣的电影" class="headerlink" title="620. 有趣的电影"></a><a href="https://leetcode-cn.com/problems/not-boring-movies/" target="_blank" rel="noopener">620. 有趣的电影</a></h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p><p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。</p><p>例如，下表 cinema:</p><pre><code class="hljs plain">+---------+-----------+--------------+-----------+|   id    | movie     |  description |  rating   |+---------+-----------+--------------+-----------+|   1     | War       |   great 3D   |   8.9     ||   2     | Science   |   fiction    |   8.5     ||   3     | irish     |   boring     |   6.2     ||   4     | Ice song  |   Fantacy    |   8.6     ||   5     | House card|   Interesting|   9.1     |+---------+-----------+--------------+-----------+</code></pre><p>对于上面的例子，则正确的输出是为：</p><pre><code class="hljs plain">+---------+-----------+--------------+-----------+|   id    | movie     |  description |  rating   |+---------+-----------+--------------+-----------+|   5     | House card|   Interesting|   9.1     ||   1     | War       |   great 3D   |   8.9     |+---------+-----------+--------------+-----------+</code></pre><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT *FROM cinemaWHERE id % 2 &#x3D; 1     AND description !&#x3D; &#39;boring&#39;ORDER BY rating DESC</code></pre><h3 id="626-换座位"><a href="#626-换座位" class="headerlink" title="626. 换座位"></a><a href="https://leetcode-cn.com/problems/exchange-seats/" target="_blank" rel="noopener">626. 换座位</a></h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p><p>其中纵列的 id 是连续递增的</p><p>小美想改变相邻俩学生的座位。</p><p>你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</p><p>示例：</p><pre><code class="hljs plain">+---------+---------+|    id   | student |+---------+---------+|    1    | Abbot   ||    2    | Doris   ||    3    | Emerson ||    4    | Green   ||    5    | Jeames  |+---------+---------+</code></pre><p>假如数据输入的是上表，则输出结果如下：</p><pre><code class="hljs plain">+---------+---------+|    id   | student |+---------+---------+|    1    | Doris   ||    2    | Abbot   ||    3    | Green   ||    4    | Emerson ||    5    | Jeames  |+---------+---------+</code></pre><p>注意：</p><p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><pre><code class="hljs mysql">SELECT    (CASE        WHEN id % 2 !&#x3D; 0 AND id !&#x3D; counts THEN id + 1        WHEN id % 2 !&#x3D; 0 AND id &#x3D; counts THEN id        ELSE id - 1    END) AS id,    studentFROM    seat,    (SELECT        COUNT(*) AS counts    FROM        seat) AS seat_countsORDER BY id ASC</code></pre><h3 id="627-交换工资"><a href="#627-交换工资" class="headerlink" title="627. 交换工资"></a><a href="https://leetcode-cn.com/problems/swap-salary/" target="_blank" rel="noopener">627. 交换工资</a></h3><h4 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h4><p>给定一个 salary 表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。</p><p>注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。</p><p>例如：<br><pre><code class="hljs plain">| id   | name | sex  | salary || ---- | ---- | ---- | ------ || 1    | A    | m    | 2500   || 2    | B    | f    | 1500   || 3    | C    | m    | 5500   || 4    | D    | f    | 500    |</code></pre><br>运行你所编写的更新语句之后，将会得到以下表:<br><pre><code class="hljs plain">| id   | name | sex  | salary || ---- | ---- | ---- | ------ || 1    | A    | f    | 2500   || 2    | B    | m    | 1500   || 3    | C    | f    | 5500   || 4    | D    | m    | 500    |</code></pre></p><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">UPDATE salarySET sex &#x3D; CASE sex    WHEN &#39;f&#39; THEN &#39;m&#39;    ELSE &#39;f&#39;    END</code></pre><h3 id="1179-重新格式化部门表"><a href="#1179-重新格式化部门表" class="headerlink" title="1179. 重新格式化部门表"></a><a href="https://leetcode-cn.com/problems/reformat-department-table/" target="_blank" rel="noopener">1179. 重新格式化部门表</a></h3><h4 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h4><p>部门表 Department：</p><pre><code class="hljs plain">+---------------+---------+| Column Name   | Type    |+---------------+---------+| id            | int     || revenue       | int     || month         | varchar |+---------------+---------+</code></pre><p>(id, month) 是表的联合主键。<br>这个表格有关于每个部门每月收入的信息。<br>月份（month）可以取下列值 [“Jan”,”Feb”,”Mar”,”Apr”,”May”,”Jun”,”Jul”,”Aug”,”Sep”,”Oct”,”Nov”,”Dec”]。</p><p>编写一个 SQL 查询来重新格式化表，使得新的表中有一个部门 id 列和一些对应 每个月 的收入（revenue）列。</p><p>查询结果格式如下面的示例所示：</p><p>Department 表：</p><pre><code class="hljs plain">+------+---------+-------+| id   | revenue | month |+------+---------+-------+| 1    | 8000    | Jan   || 2    | 9000    | Jan   || 3    | 10000   | Feb   || 1    | 7000    | Feb   || 1    | 6000    | Mar   |+------+---------+-------+</code></pre><p>查询得到的结果表：</p><pre><code class="hljs plain">+------+-------------+-------------+-------------+-----+-------------+| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |+------+-------------+-------------+-------------+-----+-------------+| 1    | 8000        | 7000        | 6000        | ... | null        || 2    | 9000        | null        | null        | ... | null        || 3    | null        | 10000       | null        | ... | null        |+------+-------------+-------------+-------------+-----+-------------+</code></pre><p>注意，结果表有 13 列 (1个部门 id 列 + 12个月份的收入列)。</p><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT id,SUM(CASE month WHEN &#39;Jan&#39; THEN revenue END) AS &#39;Jan_Revenue&#39;,SUM(CASE month WHEN &#39;Feb&#39; THEN revenue END) AS &#39;Feb_Revenue&#39;,SUM(CASE month WHEN &#39;Mar&#39; THEN revenue END) AS &#39;Mar_Revenue&#39;,SUM(CASE month WHEN &#39;Apr&#39; THEN revenue END) AS &#39;Apr_Revenue&#39;,SUM(CASE month WHEN &#39;May&#39; THEN revenue END) AS &#39;May_Revenue&#39;,SUM(CASE month WHEN &#39;Jun&#39; THEN revenue END) AS &#39;Jun_Revenue&#39;,SUM(CASE month WHEN &#39;Jul&#39; THEN revenue END) AS &#39;Jul_Revenue&#39;,SUM(CASE month WHEN &#39;Aug&#39; THEN revenue END) AS &#39;Aug_Revenue&#39;,SUM(CASE month WHEN &#39;Sep&#39; THEN revenue END) AS &#39;Sep_Revenue&#39;,SUM(CASE month WHEN &#39;Oct&#39; THEN revenue END) AS &#39;Oct_Revenue&#39;,SUM(CASE month WHEN &#39;Nov&#39; THEN revenue END) AS &#39;Nov_Revenue&#39;,SUM(CASE month WHEN &#39;Dec&#39; THEN revenue END) AS &#39;Dec_Revenue&#39;FROM DepartmentGROUP BY idORDER BY id</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode部分SQL习题（一）</title>
    <link href="/2020/sql-on-leetcode/"/>
    <url>/2020/sql-on-leetcode/</url>
    
    <content type="html"><![CDATA[<p>SQL是一种特定目的编程语言，用于管理关系数据库管理系统（RDBMS），或在关系流数据管理系统（RDSMS）中进行流处理。<br><a id="more"></a></p><h3 id="175-组合两个表"><a href="#175-组合两个表" class="headerlink" title="175. 组合两个表"></a>175. 组合两个表</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><pre><code class="hljs plain">表1: Person+-------------+---------+| 列名         | 类型     |+-------------+---------+| PersonId    | int     || FirstName   | varchar || LastName    | varchar |+-------------+---------+PersonId 是上表主键</code></pre><pre><code class="hljs plain">表2: Address+-------------+---------+| 列名         | 类型    |+-------------+---------+| AddressId   | int     || PersonId    | int     || City        | varchar || State       | varchar |+-------------+---------+AddressId 是上表主键</code></pre><p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：<br><code>FirstName, LastName, City, State</code></p><p>来源：<a href="https://leetcode-cn.com/problems/combine-two-tables" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT FirstName, LastName, City, StateFROM PersonLEFT JOIN AddressON Person.PersonId &#x3D; Address.PersonId</code></pre><h3 id="176-第二高的薪水"><a href="#176-第二高的薪水" class="headerlink" title="176. 第二高的薪水"></a>176. 第二高的薪水</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。<br><pre><code class="hljs plain">+----+--------+| Id | Salary |+----+--------+| 1  | 100    || 2  | 200    || 3  | 300    |+----+--------+</code></pre><br>例如上述 Employee 表，SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。<br><pre><code class="hljs plain">+---------------------+| SecondHighestSalary |+---------------------+| 200                 |+---------------------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/second-highest-salary" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT(SELECT DISTINCT SalaryFROM Employee ORDER BY Salary DESCLIMIT 1 OFFSET 1)AS SecondHighestSalary</code></pre><h3 id="177-第N高的薪水"><a href="#177-第N高的薪水" class="headerlink" title="177. 第N高的薪水"></a>177. 第N高的薪水</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。<br><pre><code class="hljs plain">+----+--------+| Id | Salary |+----+--------+| 1  | 100    || 2  | 200    || 3  | 300    |+----+--------+</code></pre><br>例如上述 Employee 表，n = 2 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。<br><pre><code class="hljs plain">+---------------------+| SecondHighestSalary |+---------------------+| 200                 |+---------------------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/nth-highest-salary" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGIN  SET N &#x3D; N - 1;  RETURN (      # Write your MySQL query statement below.      SELECT salary      FROM employee      GROUP BY salary      ORDER BY salary DESC      LIMIT N, 1  );END</code></pre><h3 id="178-分数排名"><a href="#178-分数排名" class="headerlink" title="178. 分数排名"></a>178. 分数排名</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询来实现分数排名。</p><p>如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。<br><pre><code class="hljs plain">+----+-------+| Id | Score |+----+-------+| 1  | 3.50  || 2  | 3.65  || 3  | 4.00  || 4  | 3.85  || 5  | 4.00  || 6  | 3.65  |+----+-------+</code></pre><br>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：<br><pre><code class="hljs plain">+-------+------+| Score | Rank |+-------+------+| 4.00  | 1    || 4.00  | 1    || 3.85  | 2    || 3.65  | 3    || 3.65  | 3    || 3.50  | 4    |+-------+------+</code></pre><br>重要提示：对于 MySQL 解决方案，如果要转义用作列名的保留字，可以在关键字之前和之后使用撇号。例如 `Rank`<br>来源：<a href="https://leetcode-cn.com/problems/rank-scores" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT Score,DENSE_RANK() OVER(ORDER BY Score DESC) AS &#96;Rank&#96;FROM Scores</code></pre><h3 id="180-连续出现的数字"><a href="#180-连续出现的数字" class="headerlink" title="180. 连续出现的数字"></a>180. 连续出现的数字</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。<br><pre><code class="hljs plain">+----+-----+| Id | Num |+----+-----+| 1  |  1  || 2  |  1  || 3  |  1  || 4  |  2  || 5  |  1  || 6  |  2  || 7  |  2  |+----+-----+</code></pre><br>例如，给定上面的 Logs 表， 1 是唯一连续出现至少三次的数字。<br><pre><code class="hljs plain">+-----------------+| ConsecutiveNums |+-----------------+| 1               |+-----------------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/consecutive-numbers" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">方法一SELECT DISTINCT A.Num AS ConsecutiveNums FROM logs AS aINNER JOIN logs AS B ON A.id+1 &#x3D; B.id AND A.Num &#x3D; B.NumINNER JOIN logs AS C ON B.id+1 &#x3D; C.id AND B.Num &#x3D; C.Num方法二SELECT DISTINCT A.Num AS ConsecutiveNums FROM logs AS A, logs AS B, logs AS CWHERE A.id+1 &#x3D; B.id     AND A.Num &#x3D; B.Num    AND B.id+1 &#x3D; C.id     AND B.Num &#x3D; C.Num</code></pre><h3 id="181-超过经理收入的员工"><a href="#181-超过经理收入的员工" class="headerlink" title="181. 超过经理收入的员工"></a>181. 超过经理收入的员工</h3><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><p>Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。<br><pre><code class="hljs plain">+----+-------+--------+-----------+| Id | Name  | Salary | ManagerId |+----+-------+--------+-----------+| 1  | Joe   | 70000  | 3         || 2  | Henry | 80000  | 4         || 3  | Sam   | 60000  | NULL      || 4  | Max   | 90000  | NULL      |+----+-------+--------+-----------+</code></pre><br>给定 Employee 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。<br><pre><code class="hljs plain">+----------+| Employee |+----------+| Joe      |+----------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/employees-earning-more-than-their-managers" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT A.Name As Employee FROM Employee AS A, Employee AS BWHERE A.MAnagerId &#x3D; B.Id    AND A.Salary &gt; B.Salary</code></pre><h3 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182. 查找重复的电子邮箱"></a>182. 查找重复的电子邮箱</h3><h4 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。</p><p>示例：<br><pre><code class="hljs plain">+----+---------+| Id | Email   |+----+---------+| 1  | a@b.com || 2  | c@d.com || 3  | a@b.com |+----+---------+</code></pre><br>根据以上输入，你的查询应返回以下结果：<br><pre><code class="hljs plain">+---------+| Email   |+---------+| a@b.com |+---------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/duplicate-emails" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT DISTINCT A.EmailFROM Person AS A, Person AS BWHERE A.Email &#x3D; B.Email    AND A.ID !&#x3D; B.Id</code></pre><h3 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183. 从不订购的客户"></a>183. 从不订购的客户</h3><h4 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h4><p>某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。<br><pre><code class="hljs plain">Customers 表：+----+-------+| Id | Name  |+----+-------+| 1  | Joe   || 2  | Henry || 3  | Sam   || 4  | Max   |+----+-------+Orders 表：+----+------------+| Id | CustomerId |+----+------------+| 1  | 3          || 2  | 1          |+----+------------+</code></pre><br>例如给定上述表格，你的查询应返回：<br><pre><code class="hljs plain">+-----------+| Customers |+-----------+| Henry     || Max       |+-----------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/customers-who-never-order" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT Name AS Customers FROM Customers WHERE Id NOT IN (    SELECT CustomerId FROM Orders )</code></pre><h3 id="184-部门工资最高的员工"><a href="#184-部门工资最高的员工" class="headerlink" title="184. 部门工资最高的员工"></a>184. 部门工资最高的员工</h3><h4 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h4><p>Employee 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。<br><pre><code class="hljs plain">+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Jim   | 90000  | 1            || 3  | Henry | 80000  | 2            || 4  | Sam   | 60000  | 2            || 5  | Max   | 90000  | 1            |+----+-------+--------+--------------+</code></pre><br>Department 表包含公司所有部门的信息。<br><pre><code class="hljs plain">+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><br>编写一个 SQL 查询，找出每个部门工资最高的员工。对于上述表，您的 SQL 查询应返回以下行（行的顺序无关紧要）。<br><pre><code class="hljs plain">+------------+----------+--------+| Department | Employee | Salary |+------------+----------+--------+| IT         | Max      | 90000  || IT         | Jim      | 90000  || Sales      | Henry    | 80000  |+------------+----------+--------+</code></pre><br>解释：<br>Max 和 Jim 在 IT 部门的工资都是最高的，Henry 在销售部的工资最高。</p><p>来源：<a href="https://leetcode-cn.com/problems/department-highest-salary" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT Department.Name AS &#96;Department&#96;, Employee .Name AS &#96;Employee&#96;, SalaryFROM EmployeeJOIN Department ON Employee.DepartmentId &#x3D; Department.IdWHERE (Employee.DepartmentId , Salary) IN(    SELECT DepartmentId, MAX(Salary)    FROM Employee    GROUP BY DepartmentId)</code></pre><h3 id="185-部门工资前三高的所有员工"><a href="#185-部门工资前三高的所有员工" class="headerlink" title="185. 部门工资前三高的所有员工"></a>185. 部门工资前三高的所有员工</h3><h4 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h4><p>Employee 表包含所有员工信息，每个员工有其对应的工号 Id，姓名 Name，工资 Salary 和部门编号 DepartmentId 。<br><pre><code class="hljs plain">+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 85000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            || 5  | Janet | 69000  | 1            || 6  | Randy | 85000  | 1            || 7  | Will  | 70000  | 1            |+----+-------+--------+--------------+</code></pre><br>Department 表包含公司所有部门的信息。<br><pre><code class="hljs plain">+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><br>编写一个 SQL 查询，找出每个部门获得前三高工资的所有员工。例如，根据上述给定的表，查询结果应返回：<br><pre><code class="hljs plain">+------------+----------+--------+| Department | Employee | Salary |+------------+----------+--------+| IT         | Max      | 90000  || IT         | Randy    | 85000  || IT         | Joe      | 85000  || IT         | Will     | 70000  || Sales      | Henry    | 80000  || Sales      | Sam      | 60000  |+------------+----------+--------+</code></pre><br>解释：<br>IT 部门中，Max 获得了最高的工资，Randy 和 Joe 都拿到了第二高的工资，Will 的工资排第三。销售部门（Sales）只有两名员工，Henry 的工资最高，Sam 的工资排第二。</p><p>来源：<a href="https://leetcode-cn.com/problems/department-top-three-salaries" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT D.Name AS &#96;Department&#96;, E1.Name AS &#96;Employee&#96;, SalaryFROM Employee AS E1JOIN Department AS D ON E1.DepartmentId &#x3D; D.IdWHERE (    SELECT COUNT(DISTINCT E2.Salary)    FROM Employee AS E2    WHERE E1.Salary &lt; E2.Salary        AND E1.DepartmentId &#x3D; E2.DepartmentId) &lt; 3</code></pre><h3 id="196-删除重复的电子邮箱"><a href="#196-删除重复的电子邮箱" class="headerlink" title="196. 删除重复的电子邮箱"></a>196. 删除重复的电子邮箱</h3><h4 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h4><p>编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。<br><pre><code class="hljs plain">+----+------------------+| Id | Email            |+----+------------------+| 1  | john@example.com || 2  | bob@example.com  || 3  | john@example.com |+----+------------------+</code></pre><br>Id 是这个表的主键。<br>例如，在运行你的查询语句之后，上面的 Person 表应返回以下几行:<br><pre><code class="hljs plain">+----+------------------+| Id | Email            |+----+------------------+| 1  | john@example.com || 2  | bob@example.com  |+----+------------------+</code></pre><br>提示：</p><ul><li>执行 SQL 之后，输出是整个 Person 表。</li><li>使用 delete 语句。<br>来源：<a href="https://leetcode-cn.com/problems/delete-duplicate-emails" target="_blank" rel="noopener">LeetCode</a><h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">DELETE A FROM Person A,    Person BWHERE    A.Email &#x3D; B.Email     AND A.Id &gt; B.Id</code></pre></li></ul><h3 id="197-上升的温度"><a href="#197-上升的温度" class="headerlink" title="197. 上升的温度"></a>197. 上升的温度</h3><h4 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h4><p>给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。<br><pre><code class="hljs plain">+---------+------------------+------------------+| Id(INT) | RecordDate(DATE) | Temperature(INT) |+---------+------------------+------------------+|       1 |       2015-01-01 |               10 ||       2 |       2015-01-02 |               25 ||       3 |       2015-01-03 |               20 ||       4 |       2015-01-04 |               30 |+---------+------------------+------------------+</code></pre><br>例如，根据上述给定的 Weather 表格，返回如下 Id:<br><pre><code class="hljs plain">+----+| Id |+----+|  2 ||  4 |+----+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/rising-temperature" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT A.Id FROM Weather AS A, Weather AS BWHERE DATEDIFF(A.RecordDate, B.RecordDate) &#x3D; 1    AND A.Temperature &gt; B.Temperature</code></pre><h3 id="262-行程和用户"><a href="#262-行程和用户" class="headerlink" title="262. 行程和用户"></a>262. 行程和用户</h3><h4 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h4><p>Trips 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 `(‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。<br><pre><code class="hljs plain">+----+-----------+-----------+---------+--------------------+----------+| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|+----+-----------+-----------+---------+--------------------+----------+| 1  |     1     |    10     |    1    |     completed      |2013-10-01|| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|| 3  |     3     |    12     |    6    |     completed      |2013-10-01|| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|| 5  |     1     |    10     |    1    |     completed      |2013-10-02|| 6  |     2     |    11     |    6    |     completed      |2013-10-02|| 7  |     3     |    12     |    6    |     completed      |2013-10-02|| 8  |     2     |    12     |    12   |     completed      |2013-10-03|| 9  |     3     |    10     |    12   |     completed      |2013-10-03| | 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|+----+-----------+-----------+---------+--------------------+----------+</code></pre><br>Users 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。<br><pre><code class="hljs plain">+----------+--------+--------+| Users_Id | Banned |  Role  |+----------+--------+--------+|    1     |   No   | client ||    2     |   Yes  | client ||    3     |   No   | client ||    4     |   No   | client ||    10    |   No   | driver ||    11    |   No   | driver ||    12    |   No   | driver ||    13    |   No   | driver |+----------+--------+--------+</code></pre><br>写一段 SQL 语句查出 2013年10月1日 至 2013年10月3日 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><p>取消率的计算方式如下：(被司机或乘客取消的非禁止用户生成的订单数量) / (非禁止用户生成的订单总数)<br><pre><code class="hljs plain">+------------+-------------------+|     Day    | Cancellation Rate |+------------+-------------------+| 2013-10-01 |       0.33        || 2013-10-02 |       0.00        || 2013-10-03 |       0.50        |+------------+-------------------+</code></pre><br>来源：<a href="https://leetcode-cn.com/problems/trips-and-users" target="_blank" rel="noopener">LeetCode</a></p><h4 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h4><pre><code class="hljs mysql">SELECT     Request_at AS Day,     ROUND(AVG(Status!&#x3D;&#39;completed&#39;), 2) AS &#39;Cancellation Rate&#39;FROM Trips AS TJOIN Users AS U1 ON T.Client_Id  &#x3D; U1.Users_Id AND U1.Banned &#x3D; &quot;No&quot;JOIN Users AS U2 ON T.Driver_Id  &#x3D; U2.Users_Id AND U2.Banned &#x3D; &quot;No&quot;    WHERE request_at BETWEEN &#39;2013-10-01&#39; AND &#39;2013-10-03&#39;GROUP BY Request_at</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24种性格力量测试</title>
    <link href="/2020/character-strengths/"/>
    <url>/2020/character-strengths/</url>
    
    <content type="html"><![CDATA[<p>在哈佛幸福课第13讲中，提到了一种应用自身人格力量来获得积极心态、对抗逆境的方法。<br>VIA（行动价值协会）性格力量手册是由Seligman和Peterson提出，主张通过鉴别人的美德、力量与长处，并利用这些人格力量来获得积极的心态、实现自我和谐的奋斗旅程。</p><a id="more"></a>  <p>测试网站：<br><a href="https://www.viacharacter.org/character-strengths-via" target="_blank" rel="noopener">Learn Your Character Strengths &amp; Personal Traits | VIA Institute</a><br><a href="https://types.yuzeli.com/survey/via240" target="_blank" rel="noopener">24种人格力量测试(VIA) - 优势识别器_心理成长</a></p><p>我的测试结果</p><h4 id="1、Honesty丨坦诚"><a href="#1、Honesty丨坦诚" class="headerlink" title="1、Honesty丨坦诚"></a>1、Honesty丨坦诚</h4><p>Speaking the truth but more broadly presenting oneself in a genuine way and acting in a sincere way; being without pretense; taking responsibility for one’s feelings and actions.<br>你是个诚实的人,不止说实话,还会以很真实的态度生活和与别人交往。你是个实事求是的人,不会假装自己的情绪和状态,是个「真心」的人。</p><h4 id="2、Fairness丨公平"><a href="#2、Fairness丨公平" class="headerlink" title="2、Fairness丨公平"></a>2、Fairness丨公平</h4><p>Treating all people the same according to notions of fairness and justice; not letting feelings bias decisions about others; giving everyone a fair chance.<br>对所有人公平,是你坚持不变的原则。 你不会因为个人的感情,而影响你对别人做出有偏差的判断。 你给予每个人平等的机会。</p><h4 id="3、Humility丨谦逊"><a href="#3、Humility丨谦逊" class="headerlink" title="3、Humility丨谦逊"></a>3、Humility丨谦逊</h4><p>Letting one’s accomplishments speak for themselves; not regarding oneself as more special than one is.<br>你喜欢让自己的成就和行动为自己说话。 你不认为自己要比别人特殊,让事实说话，谦虚是你的特质。</p><h4 id="4、Gratitude-感恩"><a href="#4、Gratitude-感恩" class="headerlink" title="4、Gratitude|感恩"></a>4、Gratitude|感恩</h4><p>Being aware of and thankful for the good things that happen; taking time to express thanks.<br>你留意到发生在自己身上的好事,但从不会视为理所当然。由于你常常表达谢意,你身边的人都知道你是个懂得感恩的人。</p><h4 id="5、Kindness-友善"><a href="#5、Kindness-友善" class="headerlink" title="5、Kindness|友善"></a>5、Kindness|友善</h4><p>Doing favors and good deeds for others; helping them; taking care of them.<br>你乐于帮助别人，为他人做对他们有益的事情。 别人请你做事,你从不推搪。你享受为别人做好事,照顾他人，即使是那些人和你认识不深。</p><h4 id="6、Leadership-统率"><a href="#6、Leadership-统率" class="headerlink" title="6、Leadership|统率"></a>6、Leadership|统率</h4><p>Encouraging a group of which one is a member to get things done and at the same time maintain good relations within the group; organizing group activities and seeing that they happen.<br>你善于鼓励你所在的团队中的其它伙伴完成工作,但与此同时还能让每名组员和你有良好的关系。你善于筹划活动，让一件事实实在在的发生。</p><h4 id="7、Appreciation-of-Beauty-amp-Excellence-欣赏美与卓越"><a href="#7、Appreciation-of-Beauty-amp-Excellence-欣赏美与卓越" class="headerlink" title="7、Appreciation of Beauty &amp; Excellence|欣赏美与卓越"></a>7、Appreciation of Beauty &amp; Excellence|欣赏美与卓越</h4><p>Noticing and appreciating beauty, excellence, and/or skilled performance in various domains of life, from nature to art to mathematics to science to everyday experience.<br>在生命中的一切一切,从大自然、艺术、数学、科学以至日常生活体验,你都有注意到和欣赏到其美丽、优秀,和富技巧之处。</p><h4 id="8、Prudence-谨慎"><a href="#8、Prudence-谨慎" class="headerlink" title="8、Prudence|谨慎"></a>8、Prudence|谨慎</h4><p>Being careful about one’s choices; not taking undue risks; not saying or doing things that might later be regretted.<br>你这个人很小心,选择也是一贯的审慎。 你不会说些将来会令自己后悔的话,或是做会后悔的事。</p><h4 id="9、Love-深度交往"><a href="#9、Love-深度交往" class="headerlink" title="9、Love|深度交往"></a>9、Love|深度交往</h4><p>Valuing close relations with others, in particular those in which sharing &amp; caring are reciprocated; being close to people.<br>你重视和别人的亲密关系,特别是那些互相分享和关怀的关系。 那些给你最亲密感觉的人,他们同样感到跟你最亲密。</p><h4 id="10、Zest-热情"><a href="#10、Zest-热情" class="headerlink" title="10、Zest|热情"></a>10、Zest|热情</h4><p>Approaching life with excitement and energy; not doing things halfway or halfheartedly; living life as an adventure; feeling alive and activated.<br>无论做什么事,你都怀着兴奋的心情和干劲去做。 你做事不会半途而废,也不会觉得没劲。 对于你来说,生命是一场历险。</p><h4 id="11、Creativity-创意"><a href="#11、Creativity-创意" class="headerlink" title="11、Creativity|创意"></a>11、Creativity|创意</h4><p>Thinking of novel and productive ways to conceptualize and do things; includes artistic achievement but is not limited to it.<br>能够想出新方法做事是你拥有的重要特质。 如果有更好的方法,你决不会满足于用传统方法去做同样的事。</p><h4 id="12、Forgiveness-宽容"><a href="#12、Forgiveness-宽容" class="headerlink" title="12、Forgiveness|宽容"></a>12、Forgiveness|宽容</h4><p>Forgiving those who have done wrong; accepting others’ shortcomings; giving people a second chance; not being vengeful.<br>你宽恕那些开罪你的人,也经常给别人第二次机会。 你的左右铭是慈悲,而不是报复。</p><h4 id="13、Teamwork-团队精神"><a href="#13、Teamwork-团队精神" class="headerlink" title="13、Teamwork|团队精神"></a>13、Teamwork|团队精神</h4><p>Working well as a member of a group or team; being loyal to the group; doing one’s share.<br>作为团队的一份子,你的表现突出,是个忠心和热心的队员。 你对自己分内工作负责,并为团队的成功而努力。</p><h4 id="14、Love-of-learning-喜爱学习"><a href="#14、Love-of-learning-喜爱学习" class="headerlink" title="14、Love of learning|喜爱学习"></a>14、Love of learning|喜爱学习</h4><p>Mastering new skills, topics, and bodies of knowledge, whether on one’s own or formally; related to the strength of curiosity but goes beyond it to describe the tendency to add systematically to what one knows.<br>不管是在课堂上或自学,你都喜爱学习新事物的过程。与好奇心有相似之处，但是这个优势让你喜欢系统性地在自己已经有的知识以外去吸收学习。</p><h4 id="15、Judgment-判断力"><a href="#15、Judgment-判断力" class="headerlink" title="15、Judgment|判断力"></a>15、Judgment|判断力</h4><p>Thinking things through and examining them from all sides; not jumping to conclusions; being able to change one’s mind in light of evidence; weighing all evidence fairly.<br>能从多角度思考和考证事物是你重要的特质。 你不会妄下结论,只会根据实际的证据做决定。 你能够变通。</p><h4 id="16、Bravery-勇敢"><a href="#16、Bravery-勇敢" class="headerlink" title="16、Bravery|勇敢"></a>16、Bravery|勇敢</h4><p>Not shrinking from threat, challenge, difficulty, or pain; speaking up for what’s right even if there’s opposition; acting on convictions even if unpopular; includes physical bravery but is not limited to it.<br>你这个人无所畏惧,绝不会在威胁、挑战、困难或痛苦前畏缩。 即使面对反抗,你仍会为正义大声疾呼。 你会根据自己的信念而行动。</p><h4 id="17、Social-intelligence-社交智慧"><a href="#17、Social-intelligence-社交智慧" class="headerlink" title="17、Social intelligence|社交智慧"></a>17、Social intelligence|社交智慧</h4><p>Being aware of the motives/feelings of others and oneself; knowing what to do to fit into different social situations; knowing what makes other people tick.<br>你能轻松地察觉别人的动机和感受。 在不同的社交场合,你知道该做什么,才能使其他人感到自在。</p><h4 id="18、Self-Regulation-自我控制"><a href="#18、Self-Regulation-自我控制" class="headerlink" title="18、Self-Regulation|自我控制"></a>18、Self-Regulation|自我控制</h4><p>Regulating what one feels and does; being disciplined; controlling one’s appetites and emotions.<br>你自觉地控制自己的情绪与行为，是个自律的人。 你对自己的食量和情绪都很有自制力,不会反被它们支配。</p><h4 id="19、Humor-幽默"><a href="#19、Humor-幽默" class="headerlink" title="19、Humor|幽默"></a>19、Humor|幽默</h4><p>Liking to laugh and tease; bringing smiles to other people; seeing the light side; making (not necessarily telling) jokes.<br>你喜欢大笑和逗别人开心。 对你来说,为别人带来欢笑很重要。 在任何情况下,你都尝试去看事情轻松的一面。</p><h4 id="20、Curiosity-好奇心"><a href="#20、Curiosity-好奇心" class="headerlink" title="20、Curiosity|好奇心"></a>20、Curiosity|好奇心</h4><p>Taking an interest in ongoing experience for its own sake; finding subjects and topics fascinating; exploring and discovering.<br>你对任何事都感到好奇。 你经常发问,对所有话题和题目都感到着迷。 你喜欢探索和发掘新事物。</p><h4 id="21、Perspective-洞察力"><a href="#21、Perspective-洞察力" class="headerlink" title="21、Perspective|洞察力"></a>21、Perspective|洞察力</h4><p>Being able to provide wise counsel to others; having ways of looking at the world that make sense to oneself/others.<br>你的朋友常常认为你有独特的观察视角和能力。 他们重视你对事物的洞察力和分析,并向你寻求意见。 你具备对事物做解析并让自己和别人轻松理解的能力。</p><h4 id="22、Spirituality-灵性"><a href="#22、Spirituality-灵性" class="headerlink" title="22、Spirituality|灵性"></a>22、Spirituality|灵性</h4><p>Having coherent beliefs about the higher purpose and meaning of the universe; knowing where one fits within the larger scheme; having beliefs about the meaning of life that shape conduct and provide comfort.<br>你对祟高的人生目标和宇宙的意义有着强烈和贯彻的信念。 你知道自己怎样在大环境中作出配合。 你的信念塑造了你的行为,也成了你的慰藉之源。</p><h4 id="23、Hope-乐观"><a href="#23、Hope-乐观" class="headerlink" title="23、Hope|乐观"></a>23、Hope|乐观</h4><p>Expecting the best in the future and working to achieve it; believing that a good future is something that can be brought about.<br>你对未来有最好的期望,并为此努力达成心愿。 你相信未来是掌握在你手中。</p><h4 id="24、Perseverance-坚毅"><a href="#24、Perseverance-坚毅" class="headerlink" title="24、Perseverance|坚毅"></a>24、Perseverance|坚毅</h4><p>Finishing what one starts; persevering in a course of action in spite of obstacles; “getting it out the door”; taking pleasure in completing tasks.<br>你努力完成自己开展的工作。 无论怎样的工作,你都会尽力准时完成。 工作时,你不会分心,而且在完成工作的过程中获得满足感。</p>]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈佛幸福课</tag>
      
      <tag>性格力量测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>经典排序算法总结</title>
    <link href="/2020/sorting-algorithm/"/>
    <url>/2020/sorting-algorithm/</url>
    
    <content type="html"><![CDATA[<p>排序算法是最基础的算法之一，可以使用的场景也很多。不同的排序算法有不同的优缺点，这里列举了八种常用的排序算法。<br><a id="more"></a><br>各个算法的复杂度和稳定性：</p><div class="table-container"><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>插入排序</td><td>$O(n^2)$</td><td>$O(1)$</td><td>稳定</td></tr><tr><td>希尔排序</td><td>$O(n^{\frac{3}{2}})$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>归并排序</td><td>$O(nlog_{2}n)$</td><td>$O(n)$</td><td>稳定</td></tr><tr><td>快速排序</td><td>$O(nlog_{2}n)$</td><td>$O(log_{2}n)$</td><td>不稳定</td></tr><tr><td>堆排序</td><td>$O(nlog_{2}n)$</td><td>$O(1)$</td><td>不稳定</td></tr><tr><td>基数排序</td><td>$O(n*k)$</td><td>$O(n+k)$</td><td>稳定</td></tr></tbody></table></div><blockquote><p>本页面所有代码均使用C实现，使用<a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">Leetcode</a>的数组排序进行测试（题目：给你一个整数数组 nums，请你将该数组升序排列）,部分不够高效的排序算法在进行大量数据排序时会超出时间限制。部分排序算法参考<a href="https://leetcode-cn.com/problems/sort-an-array/solution/" target="_blank" rel="noopener">排序数组-题解</a></p></blockquote><h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><h4 id="1-1、步骤"><a href="#1-1、步骤" class="headerlink" title="1.1、步骤"></a>1.1、步骤</h4><ol><li>从头开始比较相邻元素，如果大小顺序错误则交换位置</li><li>往后移动继续比较，直到末尾（这时最大的元素应在末尾）</li><li>如果某一趟排序未进行交换操作则排序结束</li><li>忽略末尾已排序的元素，重复进行1与2直到排序完成</li></ol><h4 id="1-2、实现"><a href="#1-2、实现" class="headerlink" title="1.2、实现"></a>1.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize = numsSize;    <span class="hljs-keyword">int</span> i, j;    <span class="hljs-keyword">bool</span> isFinished = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; numsSize - <span class="hljs-number">1</span>; i++)&#123;        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; numsSize - i - <span class="hljs-number">1</span>; j++)&#123;            <span class="hljs-keyword">if</span>(nums[j] &gt; nums[j + <span class="hljs-number">1</span>])&#123;                <span class="hljs-keyword">int</span> temp = nums[j];                nums[j] = nums[j + <span class="hljs-number">1</span>];                nums[j + <span class="hljs-number">1</span>] = temp;                isFinished = <span class="hljs-literal">false</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(isFinished) <span class="hljs-keyword">break</span>;    &#125;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="2、选择排序"><a href="#2、选择排序" class="headerlink" title="2、选择排序"></a>2、选择排序</h3><h4 id="2-1、步骤"><a href="#2-1、步骤" class="headerlink" title="2.1、步骤"></a>2.1、步骤</h4><ol><li>遍历数组找出其中的最小元素</li><li>将最小元素放置到已排序部分队尾</li><li>剩余元素重复1于2直至排序完成</li></ol><h4 id="2-2、实现"><a href="#2-2、实现" class="headerlink" title="2.2、实现"></a>2.2、实现</h4><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize = numsSize;    <span class="hljs-keyword">int</span> i, j, <span class="hljs-built_in">min</span>;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; numsSize; i++)&#123;        <span class="hljs-built_in">min</span> = i;        <span class="hljs-keyword">for</span>(j = i; j &lt; numsSize; j++)&#123;            <span class="hljs-keyword">if</span>(nums[j] &lt; nums[<span class="hljs-built_in">min</span>])&#123;                <span class="hljs-built_in">min</span> = j;            &#125;        &#125;        <span class="hljs-keyword">int</span> temp = nums[i];        nums[i] = nums[<span class="hljs-built_in">min</span>];        nums[<span class="hljs-built_in">min</span>] = temp;    &#125;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="3、插入排序"><a href="#3、插入排序" class="headerlink" title="3、插入排序"></a>3、插入排序</h3><h4 id="3-1、步骤"><a href="#3-1、步骤" class="headerlink" title="3.1、步骤"></a>3.1、步骤</h4><p>在要排序的一组数中，假定前n-1个数已经是有序序列</p><ol><li>找到第n个数插入有序序列的位置k</li><li>将k到n-1位的数后移一位，第k位的值赋值位第n位的值</li><li>重复1与2直到排序完成</li></ol><h4 id="3-2、实现"><a href="#3-2、实现" class="headerlink" title="3.2、实现"></a>3.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize = numsSize;    <span class="hljs-keyword">int</span> i, j;    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; numsSize; i++)&#123;        <span class="hljs-keyword">int</span> temp = nums[i];        j = i - <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>( j &gt;= <span class="hljs-number">0</span> &amp;&amp; temp &lt; nums[j])&#123;            nums[j + <span class="hljs-number">1</span>] = nums[j];            j--;        &#125;        nums[j + <span class="hljs-number">1</span>] = temp;    &#125;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="4、希尔排序"><a href="#4、希尔排序" class="headerlink" title="4、希尔排序"></a>4、希尔排序</h3><h4 id="4-1、步骤"><a href="#4-1、步骤" class="headerlink" title="4.1、步骤"></a>4.1、步骤</h4><ol><li>取一个小于n的步长$d_1$，将带待排序元素分为$d_1$组</li><li>对每一组分别进行插入排序</li><li>取第二个步长$d_2$($d_1$&gt;$d_2$),重复1与2直至排序完成</li></ol><h4 id="4-2、实现"><a href="#4-2、实现" class="headerlink" title="4.2、实现"></a>4.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize = numsSize;    <span class="hljs-keyword">int</span> gap, i, j;    <span class="hljs-keyword">int</span> temp;    <span class="hljs-keyword">for</span> (gap = numsSize / <span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>)        <span class="hljs-keyword">for</span> (i = gap; i &lt; numsSize; i++) &#123;            temp = nums[i];            <span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[j] &gt; temp; j -= gap)                nums[j + gap] = nums[j];            nums[j + gap] = temp;        &#125;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="5、2路-归并排序"><a href="#5、2路-归并排序" class="headerlink" title="5、2路-归并排序"></a>5、2路-归并排序</h3><h4 id="5-1、步骤"><a href="#5-1、步骤" class="headerlink" title="5.1、步骤"></a>5.1、步骤</h4><p>假定待排序表中n个元素为n个有序的子表，归并是指将两个有序表合成为一个新的有序表</p><ol><li>将子表两两归并，得到n/2个长度为2或1的有序子表</li><li>重复1直至排序完成</li></ol><h4 id="5-2、实现"><a href="#5-2、实现" class="headerlink" title="5.2、实现"></a>5.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> startIndex, <span class="hljs-keyword">int</span> midIndex, <span class="hljs-keyword">int</span> endIndex, <span class="hljs-keyword">int</span>* sorted)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> left = startIndex;    <span class="hljs-keyword">int</span> right = midIndex + <span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> sortedIndex = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (left &lt;= midIndex &amp;&amp; right &lt;= endIndex) &#123;        <span class="hljs-keyword">if</span> (nums[left] &lt; nums[right]) &#123;            sorted[sortedIndex++] = nums[left++];        &#125; <span class="hljs-keyword">else</span> &#123;            sorted[sortedIndex++] = nums[right++];        &#125;    &#125;    <span class="hljs-keyword">while</span> (left &lt;= midIndex) &#123;        sorted[sortedIndex++] = nums[left++];    &#125;    <span class="hljs-keyword">while</span> (right &lt;= endIndex) &#123;        sorted[sortedIndex++] = nums[right++];    &#125;    sortedIndex = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (startIndex &lt;= endIndex) &#123;        nums[startIndex++] = sorted[sortedIndex++];    &#125;    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> startIndex, <span class="hljs-keyword">int</span> endIndex, <span class="hljs-keyword">int</span>* sorted)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (endIndex &lt;= startIndex) &#123;        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">int</span> midIndex = (startIndex + endIndex) / <span class="hljs-number">2</span>;    MergeSort(nums, startIndex, midIndex, sorted);    MergeSort(nums, midIndex + <span class="hljs-number">1</span>, endIndex, sorted);        Merge(nums, startIndex, midIndex, endIndex, sorted);    <span class="hljs-keyword">return</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span>* sorted = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * numsSize);    MergeSort(nums, <span class="hljs-number">0</span>, numsSize - <span class="hljs-number">1</span>, sorted);    <span class="hljs-built_in">free</span>(sorted);    *returnSize = numsSize;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="6、快速排序"><a href="#6、快速排序" class="headerlink" title="6、快速排序"></a>6、快速排序</h3><h4 id="6-1、步骤"><a href="#6-1、步骤" class="headerlink" title="6.1、步骤"></a>6.1、步骤</h4><p>快速排序是对冒泡排序的一种改进算法。</p><ol><li>在待排序表中任取一个元素p作为基准</li><li>通过一趟排序将待排序表分为两个子表，其中一个子表所有元素小于p，另一个子表多有元素大于p</li><li>递归地对上面两个字表进行1与2直至排序完成</li></ol><h4 id="6-2、实现"><a href="#6-2、实现" class="headerlink" title="6.2、实现"></a>6.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* Nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;    <span class="hljs-keyword">if</span>(left&lt;right)&#123;        <span class="hljs-keyword">int</span> i=left,j=right,temp=Nums[left];        <span class="hljs-keyword">while</span>(i!=j)&#123;            <span class="hljs-keyword">while</span>(i&lt;j&amp;&amp;Nums[j]&gt;temp)                j--;        <span class="hljs-keyword">if</span>(i&lt;j)            Nums[i++]=Nums[j];        <span class="hljs-keyword">while</span>(i&lt;j&amp;&amp;Nums[i]&lt;temp)            i++;        <span class="hljs-keyword">if</span>(i&lt;j)            Nums[j--]=Nums[i];        &#125;        Nums[i]=temp;<span class="hljs-comment">//</span>        quicksort(Nums,left,i<span class="hljs-number">-1</span>);        quicksort(Nums,i+<span class="hljs-number">1</span>,right);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    *returnSize=numsSize;    quicksort(nums,<span class="hljs-number">0</span>,numsSize<span class="hljs-number">-1</span>);    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="7、堆排序"><a href="#7、堆排序" class="headerlink" title="7、堆排序"></a>7、堆排序</h3><h4 id="7-1、步骤"><a href="#7-1、步骤" class="headerlink" title="7.1、步骤"></a>7.1、步骤</h4><p>在排序的过程中，将待排序表看成是一棵完全二叉树的顺序存储结构，利用玩完全二叉树中双亲结点和孩子结点之间的内在关系，在当前无序区中选择关键字最大（最小）的元素。</p><ol><li>用待排序表构建初始堆</li><li>输出堆顶元素</li><li>用剩余元素构建大顶堆（小顶堆），重复1与2直至排序完成</li></ol><h4 id="7-2、实现"><a href="#7-2、实现" class="headerlink" title="7.2、实现"></a>7.2、实现</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AdjustDown</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums,<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> numsSize)</span></span>&#123;   <span class="hljs-comment">//向下调整</span>    <span class="hljs-keyword">int</span> temp = nums[a];    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>*a+<span class="hljs-number">1</span>;i&lt;numsSize;i=<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>)&#123;        <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>&lt;numsSize &amp;&amp; nums[i+<span class="hljs-number">1</span>]&gt;nums[i])&#123;            i++;        &#125;        <span class="hljs-keyword">if</span>(temp &gt;= nums[i])&#123;            <span class="hljs-keyword">break</span>;        &#125;        nums[a] = nums[i];        a = i;    &#125;    nums[a] = temp;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">sortArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* nums, <span class="hljs-keyword">int</span> numsSize, <span class="hljs-keyword">int</span>* returnSize)</span></span>&#123;    (*returnSize) = numsSize;    <span class="hljs-keyword">if</span>(numsSize &lt; <span class="hljs-number">1</span>)&#123;        <span class="hljs-keyword">return</span> nums;    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=numsSize/<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;          <span class="hljs-comment">//建大根堆</span>        AdjustDown(nums,i,numsSize);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=numsSize<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i--)&#123;       <span class="hljs-comment">//排序</span>        <span class="hljs-keyword">int</span> temp = nums[<span class="hljs-number">0</span>];        nums[<span class="hljs-number">0</span>] = nums[i];        nums[i] = temp;        AdjustDown(nums,<span class="hljs-number">0</span>,i);    &#125;    <span class="hljs-keyword">return</span> nums;&#125;</code></pre><h3 id="8、基数排序"><a href="#8、基数排序" class="headerlink" title="8、基数排序"></a>8、基数排序</h3><p>基数排序是一种特别的排序方法，它采用多关键字排序思想，借助“分配”和“收集”两种操作对单逻辑关键字进行排序。基数排序又分为最高位优先排序和最低位优先排序。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用正则表达式总结</title>
    <link href="/2020/regular-expression/"/>
    <url>/2020/regular-expression/</url>
    
    <content type="html"><![CDATA[<p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。<br><a id="more"></a></p><p>正则表达式经常会在项目中用到，但是通常不是很直观，不易理解。为了方便查阅便记录了一些常用的正则表达式。</p><blockquote><p>正则表达式：<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">正则表达式–维基百科</a>、<a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">正则表达式–语法|菜鸟教程</a><br>正则可视化网站：<a href="http://wangwl.net/static/projects/visualRegex" target="_blank" rel="noopener">正则可视化</a>、<a href="https://regexper.com/" target="_blank" rel="noopener">Regexper</a>、<a href="https://www.debuggex.com/" target="_blank" rel="noopener">Debuggex</a>、<a href="https://jex.im/regulex" target="_blank" rel="noopener">Regulex</a><br>正则表达式测试：<a href="https://tool.oschina.net/regex#" target="_blank" rel="noopener">在线正则表达式测试</a>、<a href="http://c.runoob.com/front-end/854" target="_blank" rel="noopener">正则表达式在线测试丨菜鸟工具</a></p><p>本页面正则可视化均使用Regulex，若正则可视化显示错误请刷新页面或者点击图片右下角前往Regulex查看</p></blockquote><h3 id="1、邮箱"><a href="#1、邮箱" class="headerlink" title="1、邮箱"></a>1、邮箱</h3><h4 id="1-1、常用邮箱"><a href="#1-1、常用邮箱" class="headerlink" title="1.1、常用邮箱"></a>1.1、常用邮箱</h4><p>只允许英文字母、数字、下划线、英文句号、以及中划线组成<br><code>^[a-zA-Z0-9_-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+$</code></p><iframe frameborder="0" width="100%" height="350" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E%5Ba-zA-Z0-9_-%5D%2B%40%5Ba-zA-Z0-9-%5D%2B(%5C.%5Ba-zA-Z0-9-%5D%2B)%2B%24"></iframe> <h4 id="1-2、常用邮箱2"><a href="#1-2、常用邮箱2" class="headerlink" title="1.2、常用邮箱2"></a>1.2、常用邮箱2</h4><p><code>^[\w_-]+(?:\.[\w_-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?$</code></p><iframe frameborder="0" width="100%" height="260" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E%5B%5Cw_-%5D%2B(%3F%3A%5C.%5B%5Cw_-%5D%2B)*%40(%3F%3A%5B%5Cw%5D(%3F%3A%5B%5Cw-%5D*%5B%5Cw%5D)%3F%5C.)%2B%5B%5Cw%5D(%3F%3A%5B%5Cw-%5D*%5B%5Cw%5D)%3F%24"></iframe> <h3 id="2、电话-手机号码"><a href="#2、电话-手机号码" class="headerlink" title="2、电话/手机号码"></a>2、电话/手机号码</h3><h4 id="2-1、电话"><a href="#2-1、电话" class="headerlink" title="2.1、电话"></a>2.1、电话</h4><p>XXX-XXXXXXX XXXX-XXXXXXXX 格式的固定电话<br><code>(\(\d{3,4}\)|\d{3,4}-|\s)?\d{8}</code></p><iframe frameborder="0" width="100%" height="300" src="https://jex.im/regulex/#!embed=true&flags=&re=(%5C(%5Cd%7B3%2C4%7D%5C)%7C%5Cd%7B3%2C4%7D-%7C%5Cs)%3F%5Cd%7B8%7D"></iframe><h4 id="2-1、手机"><a href="#2-1、手机" class="headerlink" title="2.1、手机"></a>2.1、手机</h4><p>1XX XXXX XXXX的11位手机号<br><code>^1[^12]\d{9}$</code></p><iframe frameborder="0" width="100%" height="150" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E1%5B%5E12%5D%5Cd%7B9%7D%24"></iframe><h3 id="3、域名-URL"><a href="#3、域名-URL" class="headerlink" title="3、域名/URL"></a>3、域名/URL</h3><h4 id="3-1、通用"><a href="#3-1、通用" class="headerlink" title="3.1、通用"></a>3.1、通用</h4><p>支持所有的协议<br><code>[a-zA-z]+://[^\s]*</code></p><iframe frameborder="0" width="100%" height="190" src="https://jex.im/regulex/#!embed=true&flags=&re=%5Ba-zA-z%5D%2B%3A%2F%2F%5B%5E%5Cs%5D*"></iframe><h4 id="3-2、http-https协议"><a href="#3-2、http-https协议" class="headerlink" title="3.2、http/https协议"></a>3.2、http/https协议</h4><p><code>^((http:\/\/)|(https:\/\/))?([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}(\/)</code></p><iframe frameborder="0" width="100%" height="420" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E((http%3A%5C%2F%5C%2F)%7C(https%3A%5C%2F%5C%2F))%3F(%5Ba-zA-Z0-9%5D(%5Ba-zA-Z0-9%5C-%5D%7B0%2C61%7D%5Ba-zA-Z0-9%5D)%3F%5C.)%2B%5Ba-zA-Z%5D%7B2%2C6%7D(%5C%2F)"></iframe><h3 id="4、账号"><a href="#4、账号" class="headerlink" title="4、账号"></a>4、账号</h3><p>字母开头，允许4-16字节，允许字母数字下划线<br><code>^[a-zA-Z][a-zA-Z0-9_]{3,15}$</code></p><iframe frameborder="0" width="100%" height="260" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E%5Ba-zA-Z%5D%5Ba-zA-Z0-9_%5D%7B3%2C15%7D%24"></iframe><h3 id="5、IP地址"><a href="#5、IP地址" class="headerlink" title="5、IP地址"></a>5、IP地址</h3><p><code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><iframe frameborder="0" width="100%" height="370" src="https://jex.im/regulex/#!embed=true&flags=&re=((%3F%3A(%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5Cd%7C%5B01%5D%3F%5Cd%3F%5Cd)%5C.)%7B3%7D(%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5Cd%7C%5B01%5D%3F%5Cd%3F%5Cd))"></iframe>]]></content>
    
    
    <categories>
      
      <category>实用总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序表相关习题(C语言实现)</title>
    <link href="/2019/sequence-list/"/>
    <url>/2019/sequence-list/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h1><p>线性表的顺序存储又称为顺序表。它是一组地址连续的存储单元，依次存储线性表中的数据元素，从而使得逻辑上相邻的元素在物理上也相邻。<br><a id="more"></a><br>假定线性表的元素类型是ElemType，线性表的顺序存储类型描述为</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 100 <span class="hljs-comment">//表长初始值</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType; <span class="hljs-comment">//顺序表元素类型</span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>ElemType data[MaxSize];<span class="hljs-comment">//表中数据元素</span><span class="hljs-keyword">int</span> Length;<span class="hljs-comment">//顺序表的当前长度</span>&#125;SqList;</code></pre><h1 id="相关习题"><a href="#相关习题" class="headerlink" title="相关习题"></a>相关习题</h1><h2 id="1、删除具有最小值的元素"><a href="#1、删除具有最小值的元素" class="headerlink" title="1、删除具有最小值的元素"></a>1、删除具有最小值的元素</h2><p>从顺序表中删除具有最小值的元素(假设唯一)并由函数返回被删元素的值。空出的位置由最后一个元素填补，若顺序表为空则显示出错信息并退出运行。</p><blockquote><p>思路：遍历顺序表找到最小元素，记录其位置，然后将其替换为最后一个元素。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteMin</span><span class="hljs-params">(SqList &amp;L, ElemType &amp;left)</span></span>&#123;    <span class="hljs-keyword">if</span> (L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    left = L.data[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<span class="hljs-comment">//最小值位置记录</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[i] &lt; left)&#123;           left = L.data[i];           pos = i;        &#125;    &#125;    L.data[pos] = L.data[L.Length<span class="hljs-number">-1</span>];    L.Length--;&#125;</code></pre><h2 id="2、元素逆置"><a href="#2、元素逆置" class="headerlink" title="2、元素逆置"></a>2、元素逆置</h2><p>设计一个高效的算法，将顺序表的所有元素逆置，要求算法的空间复杂度为O(1)。</p><blockquote><p>思路：将第i个元素和第n-i个元素互换。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(SqList &amp;L)</span></span>&#123;    <span class="hljs-keyword">if</span> (L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">int</span> n = L.Length/<span class="hljs-number">2</span>;    <span class="hljs-keyword">int</span> tmp;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;n; i++)&#123;        <span class="hljs-keyword">int</span> j = L.Length<span class="hljs-number">-1</span>-i;        tmp = L.data[i];        L.data[i] = L.data[j];        L.data[j] = tmp;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="3、删除所有值为X的数据元素"><a href="#3、删除所有值为X的数据元素" class="headerlink" title="3、删除所有值为X的数据元素"></a>3、删除所有值为X的数据元素</h2><p>长度为n的顺序表L，编写一个时间复杂度为O(n)、空间复杂度为O(1)的算法，该算法删除该线性表中所有值为x的数据元素。</p><blockquote><p>思路：遍历顺序表时记录值不为x的个数j，并将第i个元素移动至第j个。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteValue</span><span class="hljs-params">(SqList &amp;L,ElemType value)</span></span>&#123;    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[i] != value)&#123;            L.data[j] = L.data[i];            j++;        &#125;    &#125;    L.Length = j;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="4、有序表中删除值在给定区间的数据元素"><a href="#4、有序表中删除值在给定区间的数据元素" class="headerlink" title="4、有序表中删除值在给定区间的数据元素"></a>4、有序表中删除值在给定区间的数据元素</h2><p>从有序顺序表中删除其值在给定值s与t之间（要求s&lt;t）的所有元素，如果s或t不合理或者顺序表为空则显示出错信息并退出。</p><blockquote><p>解法1：遍历顺序表，元素值小于等于s时无操作；元素值在s与t之间时计数n加一，元素值大于等于t时元素前移n位。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteValueBetweenST</span><span class="hljs-params">(SqList &amp;L, ElemType s, ElemType t)</span></span>&#123;    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(s &gt;= t || L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[i] &gt; s &amp;&amp; L.data[i] &lt; t )&#123;            n++;        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (L.data[i] &gt;= t)&#123;            L.data[i-n] = L.data[i];        &#125;    &#125;    L.Length -= n;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><blockquote><p>解法2：与题目3类似，判断条件变为元素值不在s与t之间。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteValueBetweenST</span><span class="hljs-params">(SqList &amp;L, ElemType s, ElemType t)</span></span>&#123;    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(s &gt;= t || L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[i] &lt;= s || L.data[i]&gt;= t )&#123;            L.data[j] = L.data[i];            j++;        &#125;    &#125;    L.Length = j;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="5、无序表中删除值在给定区间的数据元素"><a href="#5、无序表中删除值在给定区间的数据元素" class="headerlink" title="5、无序表中删除值在给定区间的数据元素"></a>5、无序表中删除值在给定区间的数据元素</h2><p>从顺序表中删除其值在给定值s与t之间（包含s和t，要求s&lt;t）的所有元素，如果s或t不合理或者顺序表为空则显示出错信息并退出。</p><blockquote><p>思路：与题目3类似，判断条件变为元素值小于s或者大于t。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteValueBetweenST2</span><span class="hljs-params">(SqList &amp;L, ElemType s, ElemType t)</span></span>&#123;    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(s &gt;= t || L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[i] &lt; s || L.data[i]&gt; t )&#123;            L.data[j] = L.data[i];            j++;        &#125;    &#125;    L.Length = j;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="6、删除重复的的数据元素"><a href="#6、删除重复的的数据元素" class="headerlink" title="6、删除重复的的数据元素"></a>6、删除重复的的数据元素</h2><p>从有序顺序表中删除所有其值重复的元素。使表中所有元素值均不同。</p><blockquote><p>思路：遍历顺序表，依次判断当前元素与下一元素是否相同。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">deleteSameValue</span><span class="hljs-params">(SqList &amp;L)</span></span>&#123;    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span>(L.Length == <span class="hljs-number">0</span>)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L.Length; i++)&#123;        <span class="hljs-keyword">if</span> (L.data[j] != L.data[i])&#123;            L.data[j+<span class="hljs-number">1</span>] = L.data[i];            j++;        &#125;    &#125;    L.Length = j + <span class="hljs-number">1</span>;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="7、合并顺序表"><a href="#7、合并顺序表" class="headerlink" title="7、合并顺序表"></a>7、合并顺序表</h2><p>将两个有序顺序表合并成一个新的有序顺序表，并由函数返回结果顺序表</p><blockquote><p>思路：比较两个有序顺序表A与B的最小的元素，将最小元素放入顺序表L中。重复此操作。最后将A或者B中剩余未比较部分加入到表L。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">merge</span><span class="hljs-params">(SqList &amp;L, SqList A, SqList B)</span></span>&#123;    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>,k = <span class="hljs-number">0</span>;<span class="hljs-comment">//分别标记三个数组下标</span>    <span class="hljs-keyword">for</span> (; i &lt; A.Length || j &lt; B.Length; )&#123; <span class="hljs-comment">//比较大小，将较小的值放入顺序表L</span>        <span class="hljs-keyword">if</span>(A.data[i] &gt;= B.data[j])&#123;            L.data[k++] = B.data[j++];        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A.data[i] &lt; B.data[j])&#123;            L.data[k++] = A.data[i++];        &#125;    &#125;    <span class="hljs-keyword">while</span>( i &lt; A.Length)&#123;<span class="hljs-comment">//将比较完毕后剩余的元素加入表L</span>        L.data[k++] = A.data[i++];    &#125;    <span class="hljs-keyword">while</span>( j &lt; B.Length)&#123;        L.data[k++] = B.data[j++];    &#125;    L.Length = k;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;</code></pre><h2 id="8、顺序表位置互换"><a href="#8、顺序表位置互换" class="headerlink" title="8、顺序表位置互换"></a>8、顺序表位置互换</h2><p>已知在一维数组A[m+n]中依次存放着两个线性表（$a_1,a_2,…,a_m$)与($b_1,b_2,…,b_n$)。试编写一个函数，将数组中两个顺序表的位置互换。</p><blockquote><p>思路：先整体逆置，再分别逆置0到n-1和n到n+m-1。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">reverse</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span>&#123;<span class="hljs-comment">//将顺序表的left到right逆置</span>    <span class="hljs-keyword">if</span> (L.Length == <span class="hljs-number">0</span> || left &gt; right || right &gt;= L.Length)        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    <span class="hljs-keyword">int</span> n = (right + left)/<span class="hljs-number">2</span>;    <span class="hljs-keyword">int</span> tmp;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n-left; i++)&#123;        tmp = L.data[left+i];        L.data[left+i] = L.data[right-i];        L.data[right-i] = tmp;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(SqList &amp;L, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span></span>&#123;    reverse(L, <span class="hljs-number">0</span>, m + n<span class="hljs-number">-1</span>);    reverse(L, <span class="hljs-number">0</span>, n<span class="hljs-number">-1</span>);    reverse(L, n, m + n<span class="hljs-number">-1</span>);&#125;</code></pre><h2 id="9、查找值为x的元素并与后继元素交换位置"><a href="#9、查找值为x的元素并与后继元素交换位置" class="headerlink" title="9、查找值为x的元素并与后继元素交换位置"></a>9、查找值为x的元素并与后继元素交换位置</h2><p>线性表（$a_1,a_2,…,a_m$)中元素递增有序且按照顺序存储于计算机中。要求设计一算法完成用最少时间在表中查找数值为x的元素，若找到将其与后继元素位置相交换，若找不到将其插入表中并使表中元素仍然有序。</p><blockquote><p>思路：查找时间最少，使用折半查找法。有值为x的函数则与下一元素交换位置，没有则将值大于x的元素后移一位，插入x。</p></blockquote><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">searchValue</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> x)</span></span>&#123;    <span class="hljs-keyword">int</span> low, mid ,high;<span class="hljs-comment">//折半查找</span>    low = <span class="hljs-number">0</span>;    high = L.Length<span class="hljs-number">-1</span>;    <span class="hljs-keyword">while</span>(low &lt;= high)&#123;        mid = (low + high)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(L.data[mid] &gt; x)&#123;            high = mid<span class="hljs-number">-1</span>;         &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L.data[mid] &lt; x)&#123;            low = mid+<span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">break</span>;        &#125;    &#125;    <span class="hljs-keyword">if</span>(low &gt; high)&#123;<span class="hljs-comment">//无该元素则插入</span>        <span class="hljs-keyword">int</span> i;        <span class="hljs-keyword">for</span> (i = L.Length<span class="hljs-number">-1</span>;L.data[i] &gt; x; i--)&#123; <span class="hljs-comment">//大于x的元素后移一位</span>            L.data[i+<span class="hljs-number">1</span>] = L.data[i];        &#125;        L.data[i+<span class="hljs-number">1</span>] = x;<span class="hljs-comment">//插入x</span>        L.Length++;    &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//有该元素则与下一元素交换</span>        <span class="hljs-keyword">int</span> tmp = L.data[mid];        L.data[mid] = L.data[mid+<span class="hljs-number">1</span>];        L.data[mid+<span class="hljs-number">1</span>] = tmp;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>顺序表</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
